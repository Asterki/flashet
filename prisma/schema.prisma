generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESQL_URI")
}

// Deck related
model deck {
  id       String @id
  name     String
  owner_id String

  owner     User            @relation(fields: [owner_id], references: [id])
  questions deck_question[]

  questions_new      Int
  questions_studying Int
  questions_done     Int

  options_random        Boolean
  options_time_limit    Boolean
  options_time_limit_MS Int?

  @@unique([id])
}

model deck_question {
  id      String @id
  deck_id String

  type  question_types @default(basic)
  front String
  back  String

  deck deck @relation(fields: [deck_id], references: [id], onDelete: Cascade)

  @@unique([id])
}

enum question_types {
  basic
  choice
  fill
}

// Account related
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  decks         deck[]
  preferences   preferences?

  @@map("users")
}

model preferences {
  user_id         String    @unique
  last_login      DateTime?
  account_created DateTime
  user            User      @relation(fields: [user_id], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
